import asyncio
from datetime import datetime, time

import aiogram.utils.exceptions
from aiogram import types, Dispatcher
from soft.db.VerifyDB import DataVerify
from telegram_bot.create_bot import bot
from telegram_bot.utils.database import UsersDatabase
from soft.signal_generation import work
from soft.db.InfoToSignalDB import DataInfoToSignal
from telegram_bot.Verirfy import get_now_price
import concurrent.futures

users = UsersDatabase()
datainfotosignal = DataInfoToSignal()
data_verify = DataVerify()


async def welcome(message: types.Message):
    await bot.send_message(message.chat.id, '–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Boss_trade_bot!\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –æ—Ç –º–µ–Ω—è –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /bonus')


async def bonus(message: types.Message):
    await bot.send_message(message.chat.id, '–í–≤–æ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥ BigBoss , –∏ –ø–æ–ª—É—á–∞–π +100% –∫ –¥–µ–ø–æ–∑–∏—Ç—É')


async def send_every_10_minutes():
    loop = asyncio.get_running_loop()
    with concurrent.futures.ThreadPoolExecutor() as pool:
        while True:
            # -1001949621459 –ø—Ä–æ–¥
            # -1001969551915 —Ç–µ—Å—Ç
            if datetime.today().weekday() <= 4:
                if users.is_work_time()[1]:
                    is_true = loop.run_in_executor(pool, work)
                    result = await is_true
                    if result:
                        write = DataVerify()
                        now = datetime.now()
                        today = now.strftime("%Y-%m-%d")
                        data = datainfotosignal.get_last_forcast()
                        data_m = await bot.send_photo(-1001949621459, photo=open('screenshot.png', 'rb'),
                                             caption=f'–í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞: {data[0]}\n\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ù–ê {"–ü–†–û–î–ê–ñ–£ üî¥" if data[1] == "SHORT" else "–ü–û–ö–£–ü–ö–£ üü¢"}\n\n–¶–µ–Ω–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞: {data[4]} üíµ\n–í—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞: {data[3]} üïñ')
                        write.input_data2(today, data_m.message_id)
                        await asyncio.sleep(180)
                        now_price = float(get_now_price())
                        if now_price >= float(data[4]) and data[1] == 'LONG':
                            data_m = await bot.send_message(-1001949621459, f'{data[0]}\n\n‚úÖ –°–∏–≥–Ω–∞–ª –∑–∞—à–µ–ª')
                            write.input_data(today, data[0], '+')
                            write.input_data2(today, data_m.message_id)
                        elif now_price <= float(data[4]) and data[1] == 'SHORT':
                            data_m = await bot.send_message(-1001949621459, f'{data[0]}\n\n‚úÖ –°–∏–≥–Ω–∞–ª –∑–∞—à–µ–ª')
                            write.input_data(today, data[0], '+')
                            write.input_data2(today, data_m.message_id)
                        else:
                            data_m = await bot.send_message(-1001949621459, f'{data[0]}\n\n‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ –∑–∞—à–µ–ª')
                            write.input_data(today, data[0], '-')
                            write.input_data2(today, data_m.message_id)
                        await asyncio.sleep(120)
                await asyncio.sleep(1)
            else:
                pass


async def check_daily_time():
    while True:
        if datetime.today().weekday() <= 4:
            now = datetime.now()
            if now > datetime.combine(now.date(), time(hour=21)) or now < datetime.combine(now.date(), time(hour=9)):
                if users.is_work_time()[1]:
                    all_signals = len(data_verify.get_all_signals())
                    plus = int(all_signals * 0.7)
                    minus = int(all_signals * 0.3)
                    for i in data_verify.get_all_messages():
                        try:
                            await bot.delete_message(-1001949621459, i[0])
                        except aiogram.utils.exceptions.MessageToDeleteNotFound:
                            pass
                    await bot.send_photo(-1001949621459, photo=open('preview.jpg', 'rb'), caption=f'–í—Å–µ–º –¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä üòä\n\n–¢–æ—Ä–≥–æ–≤—ã–π –¥–µ–Ω—å –∑–∞–∫–æ–Ω—á–µ–Ω, —Å–µ–≥–æ–¥–Ω—è –±—ã–ª–æ ({all_signals}) —Å–¥–µ–ª–æ–∫ –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö:\n‚úÖ ({plus}) –∑–∞—à–ª–∏\n‚ùå ({minus}) –Ω–µ –∑–∞—à–ª–æ\n\n–í—Å–µ–º —Ö–æ—Ä–æ—à–µ–≥–æ –≤–µ—á–µ—Ä–∞, –ø–æ–∫–∞ ‚ò∫Ô∏è')
                    users.change_work_time(morning=False, evening=True)
            else:
                if users.is_work_time()[2]:
                    await bot.send_message(-1001949621459, '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ —Ç—Ä–µ–π–¥–µ—Ä—ã ‚ùóÔ∏è\n–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Boss_trade_bot  –∏ '
                                                           '–º—ã –Ω–∞—á–∏–Ω–∞–µ–º –Ω–∞—à—É —Ç–æ—Ä–≥–æ–≤–ª—é üìà')
                    users.change_work_time(morning=True, evening=False)
            await asyncio.sleep(5)
        else:
            pass


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(welcome, commands=['start', 'help'])
    dp.register_message_handler(bonus, commands=['bonus'])
