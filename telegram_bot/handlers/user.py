import asyncio
from datetime import datetime, time
from aiogram import types, Dispatcher
from soft.db.VerifyDB import DataVerify
from telegram_bot.create_bot import bot
from telegram_bot.utils.database import UsersDatabase
from soft.signal_generation import work
from soft.db.InfoToSignalDB import DataInfoToSignal
from telegram_bot.Verirfy import get_now_price
import concurrent.futures

users = UsersDatabase()
datainfotosignal = DataInfoToSignal()
data_verify = DataVerify()


async def welcome(message: types.Message):
    await bot.send_message(message.chat.id, '–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Boss_trade_bot!\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –æ—Ç –º–µ–Ω—è –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /bonus')


async def bonus(message: types.Message):
    await bot.send_message(message.chat.id, '–í–≤–æ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥ BigBoss , –∏ –ø–æ–ª—É—á–∞–π +100% –∫ –¥–µ–ø–æ–∑–∏—Ç—É')


async def send_every_10_minutes():
    loop = asyncio.get_running_loop()
    with concurrent.futures.ThreadPoolExecutor() as pool:
        while True:
            # -1001878714474 –ø—Ä–æ–¥
            # -1001969551915 —Ç–µ—Å—Ç
            if datetime.today().weekday() <= 4:
                if users.is_work_time()[1]:
                    is_true = loop.run_in_executor(pool, work)
                    result = await is_true
                    if result:
                        data = datainfotosignal.get_last_forcast()
                        await bot.send_photo(-1001969551915, photo=open('screenshot.png', 'rb'),
                                             caption=f'{data[0]}\n\n–ò—Å–ø–æ–ª—å–∑—É—è —Å–≤–æ–π –Ω–∞–±–æ—Ä –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —è –≤–∏–∂—É —Å–∏–ª—É –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã –≤ {"–Ω–∏–∂–Ω—é—é" if data[1] == "SHORT" else "–≤–µ—Ä—Ö–Ω—é—é"} –∑–æ–Ω—É —Ñ–ª–µ—Ç–∞.'
                                                     f'\n–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É –≤ {"–Ω–∏–∑" if data[1] == "SHORT" else "–≤–≤–µ—Ä—Ö"} –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ.\n\n–í—Ä–µ–º—è –ø—Ä–æ–≥–Ω–æ–∑–∞ {data[3]}'
                                             )
                        await asyncio.sleep(180)
                        now_price = float(get_now_price())
                        now = datetime.now()
                        today = now.strftime("%Y-%m-%d")
                        write = DataVerify()
                        if now_price >= float(data[4]) and data[1] == 'LONG':
                            write.input_data(today, data[0], '+')
                            await bot.send_message(-1001969551915, f'{data[0]}\n\n‚úÖ –°–∏–≥–Ω–∞–ª –∑–∞—à–µ–ª')
                        elif now_price <= float(data[4]) and data[1] == 'SHORT':
                            write.input_data(today, data[0], '+')
                            await bot.send_message(-1001969551915, f'{data[0]}\n\n‚úÖ –°–∏–≥–Ω–∞–ª –∑–∞—à–µ–ª')
                        else:
                            write.input_data(today, data[0], '-')
                            await bot.send_message(-1001969551915, f'{data[0]}\n\n‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ –∑–∞—à–µ–ª')
                        await asyncio.sleep(120)
                await asyncio.sleep(1)
            else:
                pass


async def check_daily_time():
    while True:
        if datetime.today().weekday() <= 4:
            now = datetime.now()
            if now > datetime.combine(now.date(), time(hour=21)) or now < datetime.combine(now.date(), time(hour=9)):
                if users.is_work_time()[1]:
                    minus = 0
                    plus = 0

                    for i in data_verify.get_all_signals():
                        if i[2] == '-':
                            minus+=1
                        elif i[2] == '+':
                            plus+=1
                    await bot.send_message(-1001969551915, '–ë–æ—Ç –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏ —Ç–æ—Ä–≥–æ–≤–ª—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –≤—Å–µ–º –ø–æ–∫–∞ üëã')
                    users.change_work_time(morning=False, evening=True)
            else:
                if users.is_work_time()[2]:
                    await bot.send_message(-1001969551915, '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ —Ç—Ä–µ–π–¥–µ—Ä—ã ‚ùóÔ∏è\n–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Boss_trade_bot  –∏ '
                                                           '–º—ã –Ω–∞—á–∏–Ω–∞–µ–º –Ω–∞—à—É —Ç–æ—Ä–≥–æ–≤–ª—é üìà')
                    users.change_work_time(morning=True, evening=False)
            await asyncio.sleep(5)
        else:
            pass


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(welcome, commands=['start', 'help'])
    dp.register_message_handler(bonus, commands=['bonus'])
